apply plugin: 'com.android.application'

def packageTime() {
    return new Date().format("yyyyMMdd")
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.frezrik.androidstudy"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName rootProject.ext.version + '_' + packageTime()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        //buildConfigField "boolean", "platform", "false"
    }
    signingConfigs {
        app {
            storeFile file(STOREFILE_APP)
            storePassword STOREPASSWORD_APP
            keyAlias KEYALIAS_APP
            keyPassword KEYPASSWORD_APP
        }
        /*platform {
            storeFile STOREFILE_PLATFORM
            storePassword STOREPASSWORD_PLATFORM
            keyAlias KEYALIAS_PLATFORM
            keyPassword KEYPASSWORD_PLATFORM
        }*/
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.app
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.app
        }
        platform {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.platform
            //buildConfigField "boolean", "platform", "true"
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            aidl.srcDirs = ['src/main/java']
        }
    }
    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.processManifest.doLast {

                if (!variant.buildType.name.equals('platform')) {
                    def manifestFile = output.processManifest.manifestOutputFile
                    def updatedContent = manifestFile.getText('UTF-8').replaceAll("android:sharedUserId=\"android.uid.system\"", "")
                    manifestFile.write(updatedContent, 'UTF-8')
                }

            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support:design:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:support-v4:26.+'
    testCompile 'junit:junit:4.12'
}
