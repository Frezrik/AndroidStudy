apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.frezrik.plugin'

def packageTime = {
    new Date().format("yyyyMMdd", TimeZone.getDefault())
}

android {
    compileSdkVersion versions.compileSdk
    defaultConfig {

        println '========================='
        //println project.getProperties().get("AUTHOR")

        applicationId "com.frezrik.androidstudy"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName versions.app + '_' + packageTime()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        // ARouter need
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        ndk {
            ldLibs 'log'
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    signingConfigs {
        app {
            storeFile file(STOREFILE_APP)
            storePassword STOREPASSWORD_APP
            keyAlias KEYALIAS_APP
            keyPassword KEYPASSWORD_APP
        }
        platform {
            storeFile file(STOREFILE_PLATFORM)
            storePassword STOREPASSWORD_PLATFORM
            keyAlias KEYALIAS_PLATFORM
            keyPassword KEYPASSWORD_PLATFORM
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.app
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.app
        }
        /*platform {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.platform
            buildConfigField "boolean", "platform", "true"
        }*/
    }
    sourceSets {
        main {
            jni.srcDirs = ['jni']
            jniLibs.srcDirs = ['libs']
            aidl.srcDirs = ['src/main/aidl']
            java.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }
    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.getProcessManifestProvider().get().doLast {

                if (variant.buildType.name == 'platform') {
                    def manifestFile = file("$manifestOutputDirectory/AndroidManifest.xml")
                    def updatedContent = manifestFile.getText('UTF-8').replace("frezrik.uid.androidstudy", "android.uid.system")
                    manifestFile.write(updatedContent, 'UTF-8')
                }

            }
        }
    }

    lintOptions {
        //checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

}

dependencies {
    //implementation fileTree(include: ['*.jar'], dir: 'libs')

    if (isModule.toBoolean()) {
        implementation project(':libCommon')
        implementation project(':cryptography')
    }

    implementation project(':core')

    //leakcanary
    debugApi deps.leakcanary.leakcanary_debug
    releaseApi deps.leakcanary.leakcanary_release
    debugApi deps.leakcanary.leakcanary_fragment

    annotationProcessor project(':libRouterCompiler')
    kapt project(':libRouterCompiler')

    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'
    kapt 'com.alibaba:arouter-compiler:1.2.2'


}

/*preBuild {
    doLast {
        def imlFile = file( project.name + ".iml")
        println '=>Change ' + project.name + '.iml'
        try {
            def parsedXml = new XmlParser().parse(imlFile)

            def libsubPath;
            if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
                libsubPath = '\\app\\libs\\layoutlib.jar:unspecified@jar'
            } else {
                libsubPath = '/app/libs/layoutlib.jar:unspecified@jar'
            }
            def libPath = 'Gradle: __local_aars__:' + project.rootDir.getAbsolutePath().replace(':', '.') + libsubPath
            def libNode = parsedXml.component[1].orderEntry.find { it.@name == libPath }
            def contentNode = parsedXml.component[1].find { it.name() == 'content' }

            if(libNode != null) {
                parsedXml.component[1].remove(libNode)
                contentNode.plus{new Node( parsedXml.component[1], 'orderEntry', ['type': 'library', 'name': libPath, 'level': 'project']) }
            }

            groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
        } catch (FileNotFoundException e) {
            println "no iml found"
        }
    }
}*/
