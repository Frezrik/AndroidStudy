apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.frezrik.plugin'

def packageTime = {
    new Date().format("yyyyMMdd", TimeZone.getDefault())
}

android {
    compileSdkVersion versions.compileSdk
    defaultConfig {

        println '========================='
        //println project.getProperties().get("AUTHOR")

        applicationId "com.frezrik.androidstudy"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName versions.app + '_' + packageTime()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    signingConfigs {
        app {
            storeFile file(STOREFILE_APP)
            storePassword STOREPASSWORD_APP
            keyAlias KEYALIAS_APP
            keyPassword KEYPASSWORD_APP
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.app
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.app
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            aidl.srcDirs = ['src/main/aidl']
            java.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }
    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }

    lintOptions {
        //checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    resourcePrefix "app_"

}

dependencies {
    //implementation fileTree(include: ['*.jar'], dir: 'libs')

    if (isModule.toBoolean()) {
        implementation project(':commonlib')
    }

    implementation project(':core')
}