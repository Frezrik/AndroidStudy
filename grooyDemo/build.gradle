import groovy.json.internal.Dates

/**
 * groovy语法练习
 */
task main {
    println 'main'
    //test('hello groovy!')
    //string()
    //closure()
    //list()
    //map()
    //IO()

    //clz()
}

def test(msg) {
    println msg

    //方法变量声明
    def a = 1
    def b = 'hello world'

    println a
    println b

}

// String
def string() {
    def a = 'hello'
    def b = 'groovy'
    def c = "$a $b abc!"

    println c
}

// 闭包
def closure() {
//指定参数
    def test = { a, b ->
        println "$a $b, I am a closure!"
    }
    //使用闭包的三种方式
    test('hello', 'groovy')
    test 'hello', 'groovy'  //可省略括号
    test.call(100, 200)

    def add = { a, b ->
        a + b
    }
    def c = add('def', 'c')
    def d = add.call('def', 'call')
    println c
    println d

//不指定闭包参数，隐含参数it
    def tt = {
        println "show it: $it"
    }
    tt 'abc'

}

//list
def list() {
    def test = [100, 'hello', true]
    println test[0]
    test[1] = 200
    println test[1]

    test[5] = 500

    println test

}

//map
def map() {
    def emptyMap = [:]
    def test = ["id":1, "name":"Tom", "isMale":true]
    println test

    test.each { key, value ->
        if(key == 'name')
            println "$key:$value"
    }

    test.eachWithIndex { Map.Entry<String, Serializable> entry, int i ->
        if(i == 2) {
            println(entry.key + " " + entry.value)
            println("$entry.key ... $entry.value")
        }
    }
}

//IO
def IO() {
    def file = new File("Test.txt")
    file.eachLine { a, b ->
        println "$b $a"
    }
}

//class
class Person {
    def name
    def gender
    def age

    //默认有set/get方法


    @Override
    String toString() {
        return "Person{" +
                "name=" + name +
                ", gender=" + gender +
                ", age=" + age +
                '}'
    }
}

def clz() {
    Person p1 = new Person()
    p1.setName('Tom')
    p1.setGender('male')
    p1.setAge(20)
    println(p1)

    Person p2 = new Person()
    //当对同一个对象进行操作时，可以使用with
    p2.with {
        name = 'Jack'
        gender = 'male'
        age = 18
    }
    println(p2)

    // 非空判断可以用?表达式
    println(p1?.name)

}

// Task
task myTask {
    println "config myTask"
    File file = new File("tt.txt")
    file.write(new Date().toString() + "\n")
    file.append("myTask\n")
}

myTask.doLast {
    println "after execute myTask"
    File file = new File("tt.txt")
    file.append("doLast\n")
}

myTask.doFirst {
    println "before execute myTask"
    File file = new File("tt.txt")
    file.append("doFirst\n")
}

/*task copyDemo(type: Copy) {
    println 'task in task'
    from('../gradle.properties')
    into ('./copy')
}*/

//project创建task
task myTask1 << {
    println "execute myTask1"
}

task myTask2 << {
    println "execute myTask2"
}

project.task('proTask', group: "AndroidTask", description: "TaskStudy", dependsOn: ["myTask1", "myTask2"] ).doLast {
    println "execute proTask"
}