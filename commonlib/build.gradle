if (isModule.toBoolean()) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        if (!isModule.toBoolean()) {
            applicationId "com.frezrik.framework"
            multiDexEnabled true
        }
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        platform {
            storeFile file(STOREFILE_PLATFORM)
            storePassword STOREPASSWORD_PLATFORM
            keyAlias KEYALIAS_PLATFORM
            keyPassword KEYPASSWORD_PLATFORM
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            //shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            //shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (!isModule.toBoolean()) {
                signingConfig signingConfigs.platform
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            aidl.srcDirs = ['src/module/aidl']
            res.srcDirs = ['src/res']
            if (isModule.toBoolean()) {
                java.srcDirs = ['src/module/java', 'src/module/aidl']
                manifest.srcFile 'src/module/AndroidManifest.xml'
            } else {
                java.srcDirs = ['src/main/java', 'src/module/java', 'src/module/aidl']
                //manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }

    externalNativeBuild {
        ndkBuild {
            //path 'jni/Android.mk'
        }
    }

    if (!isModule.toBoolean()) {
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                output.processManifest.doLast {

                    if (variant.buildType.name == 'debug') {
                        def manifestFile = file("$manifestOutputDirectory/AndroidManifest.xml")
                        println "====>" + manifestFile.getPath()

                        def updatedContent = manifestFile.getText('UTF-8').replace("frezrik.uid.framwork", "android.uid.system")
                        manifestFile.write(updatedContent, 'UTF-8')
                    }

                }
            }
        }
    }

    lintOptions {
        //checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    resourcePrefix "common_"
}

dependencies {
    //implementation fileTree(dir: 'libs', include: ['*.jar'])

    api support.values()

    //leakcanary
    debugApi deps.leakcanary.leakcanary_debug
    releaseApi deps.leakcanary.leakcanary_release
    debugApi deps.leakcanary.leakcanary_fragment

    //transitive关键字,传递依赖
    //api group: 'com.frezrik.support', name: 'utils', version: '1.0', transitive: true
    api('com.frezrik.support:utils:1.0') {
        transitive = true
    }

    //system api
    compileOnly files('libs/layoutlib.jar')

    testImplementation tests.junit
}

preBuild {
    doLast {
        def imlFile = file(project.name + ".iml")
        println '=>Change ' + project.name + '.iml'
        try {
            def parsedXml = new XmlParser().parse(imlFile)

            def libsubPath
            if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
                libsubPath = '\\commonlib\\libs\\layoutlib.jar:unspecified@jar'
            } else {
                libsubPath = '/commonlib/libs/layoutlib.jar:unspecified@jar'
            }
            def libPath = 'Gradle: __local_aars__:' + project.rootDir.getAbsolutePath().replace(':', '.') + libsubPath
            def libNode = parsedXml.component[1].orderEntry.find { it.@name == libPath }
            def contentNode = parsedXml.component[1].find { it.name() == 'content' }

            if (libNode != null) {
                parsedXml.component[1].remove(libNode)
                contentNode.plus {
                    new Node(parsedXml.component[1], 'orderEntry', ['type': 'library', 'name': libPath, 'level': 'project'])
                }
            }

            groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
        } catch (FileNotFoundException e) {
            println "no iml found"
        }
    }
}
