apply plugin: 'com.android.application'

def packageTime = {
    new Date().format("yyyyMMdd", TimeZone.getDefault())
}

android {
    compileSdkVersion versions.compileSdk
    defaultConfig {
        applicationId "com.ming.androidstudy"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName versions.app + '_' + packageTime()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    signingConfigs {
        app {
            storeFile file(STOREFILE_APP)
            storePassword STOREPASSWORD_APP
            keyAlias KEYALIAS_APP
            keyPassword KEYPASSWORD_APP
        }
        platform {
            storeFile file(STOREFILE_PLATFORM)
            storePassword STOREPASSWORD_PLATFORM
            keyAlias KEYALIAS_PLATFORM
            keyPassword KEYPASSWORD_PLATFORM
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.platform
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.platform
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            aidl.srcDirs = ['src/main/aidl']
            java.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }
    externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }

    lintOptions {
        //checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

}

dependencies {
    //implementation fileTree(include: ['*.jar'], dir: 'libs')
    //system api
    compileOnly files('libs/layoutlib.jar')

    implementation support.values()
    implementation deps.log.logger

    //implementation 'com.jakewharton:butterknife:8.8.1'
    //annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
}

preBuild {
    doLast {
        def imlFile = file(project.name + ".iml")
        println '=>Change ' + project.name + '.iml'
        try {
            def parsedXml = new XmlParser().parse(imlFile)

            def libsubPath;
            if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
                libsubPath = '\\mingdroid\\libs\\layoutlib.jar:unspecified@jar'
            } else {
                libsubPath = '/mingdroid/libs/layoutlib.jar:unspecified@jar'
            }
            def libPath = 'Gradle: __local_aars__:' + project.rootDir.getAbsolutePath().replace(':', '.') + libsubPath
            def libNode = parsedXml.component[1].orderEntry.find { it.@name == libPath }
            def contentNode = parsedXml.component[1].find { it.name() == 'content' }

            if (libNode != null) {
                parsedXml.component[1].remove(libNode)
                contentNode.plus {
                    new Node(parsedXml.component[1], 'orderEntry', ['type': 'library', 'name': libPath, 'level': 'project'])
                }
            }

            groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
        } catch (FileNotFoundException e) {
            println "no iml found"
        }
    }
}
